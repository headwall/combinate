#include <iostream>
#include <cstdio>
#include <vector>
#include <ctime>

using namespace std;

void bubbleSort(int *v, int n)
{
    int i, j;
    for (i = 0; i < n - 1; i++)
    {
        for (j = 0; j < n - i - 1; j++)
        {
            if (v[j] > v[j + 1])
                swap(v[j], v[j + 1]);
        }
    }
 }

int binSearch(int *v, int x, int l, int r)
{
    int mid;
    while(l <= r)
    {
        mid = (l + r) / 2;
        if(x < v[mid])
            r = mid - 1;
        else
    //        if (x > v[mid])
                l = mid + 1;
    }
    return l;
}

void insertionSortBin(int *v, int n)
{
    int i, j, k, pos;
    for(i = 1; i < n; i++)
    {
        //j = i - 1;
        pos = binSearch(&v[0], v[i], 0, i);
        for(k = i-1; k >= pos; k--)
            swap(v[k], v[k + 1]);
    }
}

void insertionSort(int *v, int n)
{
    int i, j;
    for(i = 1; i < n; i++)
    {
        j = i - 1; // i = j + 1; ищем место для элемента v[i]
        while((j >= 0) && (v[j] > v[j + 1]))
        {
            swap(v[j], v[j + 1]);
            j--;
        }
    }
}

void selectSort(int *v, int n)
{
    int i, j, indMin;
    for(i = 0; i < n - 1; i++)
    {
        indMin = i; // k - индекс наименьшего элемента в неотсортированном массиве
        for(j = i + 1; j < n; j++)	// цикл выбора наименьшего элемента в неотсортированном моссиве
            if(v[j] < v[indMin])
                indMin = j;
        swap(v[i], v[indMin]);
    }
}

int main()
{
//    int i;
//    for (i = ; )
    freopen("../lab1Sort/testSort8.txt", "r", stdin);
    freopen("input.txt", "r", stdin);
//    freopen("test8SortOut.txt", "w+", stdout);
    freopen("output.txt", "w+", stdout);

    vector<int> vOrigin;

    int buffer, i;

    while(cin >> buffer)
        vOrigin.push_back(buffer);


    int vectorSize = vOrigin.size();

    vector<int> vForSort;

    unsigned int startTime, endTime;

//    vForSort = vOrigin;
//    cout << "Executing time: \n";
//    startTime = clock();
//    bubbleSort(&vForSort[0], vectorSize);
//    endTime = clock();
//    cout << "Bubble Sort: " << (endTime - startTime) / 1000.0 << endl;
//
//    vForSort = vOrigin;
//    startTime = clock();
//    insertionSort(&vForSort[0], vectorSize);
//    endTime = clock();
//    cout << "Insertion Sort: " << (endTime - startTime) / 1000.0 << endl;

    vForSort = vOrigin;
    startTime = clock();
    insertionSortBin(&vForSort[0], vectorSize);
    endTime = clock();
    cout << "Insertion Binary Sort: " << (endTime - startTime) / 1000.0 << endl;

//    vForSort = vOrigin;
//    startTime = clock();
//    selectSort(&vForSort[0], vectorSize);
//    endTime = clock();
//    cout << "Selection Sort: " << (endTime - startTime) / 1000.0 << endl;

    for(i = 0; i < vectorSize; i++)
        cout << vForSort[i] << ' ';

    return 0;
}
